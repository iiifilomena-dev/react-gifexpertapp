{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","undefined","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","console","log","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MA0CeA,EAvCK,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAGLC,mBADf,IAFoB,mBAGlCC,EAHkC,KAGtBC,EAHsB,KAmBzC,OAEI,aADA,CACA,QAAMC,SAXW,SAAEC,GACnBA,EAAEC,sBACiBC,IAAfL,GAA4BA,EAAWM,OAAOC,OAAS,GAEvDT,GAAe,SAAAU,GAAI,OAAKR,GAAL,mBAAoBQ,QAO3C,SAEI,uBACIC,KAAK,OACLC,MAAQV,EAERW,SAtBc,SAAER,GAExBF,EAAcE,EAAES,OAAOF,a,QCPlBG,EAAc,SAAC,GAAyB,EAAtBC,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,IAKtC,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAMF,EAAMG,IAAMJ,IACvB,kCAAMA,EAAN,W,uBCRKK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbN,EAFa,iDAEoCO,UAAWF,GAF/C,+DAIAG,MAAQR,GAJR,cAIbS,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAIFC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAKc,EAAIC,OAAOC,iBAAiBhB,QAbtB,kBAiBZY,GAjBY,4CAAH,sDCIXK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAe,IAAD,EACdtB,mBACtB,CACI4B,KAAM,GACNO,SAAS,IAJuB,mBACjCC,EADiC,KAC1BC,EAD0B,KAqCxC,OA3BAC,qBAAW,WACPjB,EAASC,GAEJiB,MAAM,SAAAC,GACHC,QAAQC,IAAIF,GACZG,YAAW,WACPN,EACI,CACIT,KAAMY,EACNL,SAAS,MAGlB,QAEZ,CAAEb,IAaEc,EDjB0BQ,CAActB,GAAlCU,EAnBwB,EAmB7BJ,KAAaO,EAnBgB,EAmBhBA,QAOrB,OACI,qCACI,qBAAIjB,UAAU,yCAAd,cAA0DI,EAA1D,OAEEa,GAAW,mBAAGjB,UAAU,wCAAb,yBAEb,qBAAKA,UAAU,YAAf,SAEYc,EAAOF,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADGA,EAAIhB,aEO7B8B,EA7Ca,WAAM,MAIM7C,mBAAS,CAAC,eAJhB,mBAIvB8C,EAJuB,KAIX/C,EAJW,KAwB9B,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAEA,6BAEQ+C,EAAWhB,KAAK,SAAAR,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,YClC9ByB,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a5de05a3.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ( { setCategories } ) => {\r\n\r\n    const initialState = '';\r\n    const [inputValue, setInputValue] = useState(initialState);\r\n\r\n    const handleInputChange = ( e ) => {\r\n        //console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault();\r\n        if (inputValue !== undefined && inputValue.trim().length > 0)\r\n        {\r\n            setCategories( cats => [inputValue, ...cats]);\r\n        }\r\n        //console.log('Submit hecho: ', setCategories);\r\n    }\r\n\r\n    return (\r\n        // <>\r\n        <form onSubmit = { handleSubmit }>\r\n            {/* <h1> { inputValue } </h1> */}\r\n            <input\r\n                type=\"text\" \r\n                value={ inputValue }\r\n                // onChange = { (e) => { console.log(e); }}\r\n                onChange = { handleInputChange }\r\n            ></input>\r\n        </form>\r\n        // </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default AddCategory;\r\n","import React from 'react'\r\n\r\n//export const GifGridItem = ( props ) => {\r\nexport const GifGridItem = ( { id, title, url } ) => {\r\n\r\n    //console.log( props );\r\n    //console.log( 'id:', id, 'title: ', title, 'url: ', url );\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={ url } alt={ title }></img>\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","\r\n\r\n    // En el ejercicio se necesita recibir una categoría y hacer una petición.\r\n    export const getGifs = async( category ) => {\r\n        // const url = 'https://api.giphy.com/v1/gifs/search?q=Rick+and+Morty&limit=10&api_key=1HrIdSh05cewFDUlZW83hzXH7iuE8fJV';\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=1HrIdSh05cewFDUlZW83hzXH7iuE8fJV`;\r\n\r\n        const resp = await fetch ( url );\r\n        const { data } = await resp.json();\r\n\r\n        // map es un métdo que recibe como parámetro una fncallback, la cual es llamada por cada elemento\r\n        // del arrya.\r\n        const gifs = data.map( img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images.downsized_medium.url\r\n            }\r\n        })\r\n\r\n        return gifs;\r\n    }","// import React, { useState, useEffect } from 'react'\r\nimport React from 'react'\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n// import { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const GifGrid = ( {category} ) => {\r\n\r\n    //const initialState = [];\r\n    //const [images, setImages] = useState(initialState)\r\n\r\n    // Se le envía como 2do. argumento un array de dependencias. Solo se ejecutará dependiendo de otro\r\n    // componente. Si indica [] quiere decir que se ejecutará una sola vez.\r\n    // useEffect( () => {\r\n    //     getGifs( category )\r\n    //         // .then( imgs => setImages(imgs));\r\n    //         .then( setImages ); // Como recibe un solo argumento se puede simplificar a esta expresión.\r\n    // }, [ category ]) // Se indica aquí category por si cambia para que vuelva a ejecutar este código.\r\n\r\n    // Vamos a hacer un Custum Hook para que ejecute una petición fetch y me indique cuando inició la\r\n    // carga y cuando terminó la carga...\r\n\r\n    // ************************************\r\n    // Uso del Custom Hook \r\n    // ************************************\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    // console.log(state);\r\n    // console.log(data);\r\n    // console.log(loading);\r\n\r\n    \r\n    return (\r\n        <>\r\n            <h3 className=\"card animate__animated animate__fadeIn\"> { category } </h3>\r\n            {/* { loading ? 'Cargando...' : 'Carga finalizada'} */}\r\n            { loading && <p className=\"card animate__animated animate__flash\">Cargando...</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                        images.map( img => \r\n                            <GifGridItem \r\n                                key = { img.id }\r\n                                { ...img }\r\n                                //img = { img } \r\n                            />\r\n\r\n                        )\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","// Cuando empieza con use es un estandar que indica que es un Hook\r\n// Los Hooks no son más que funciones. (En definitiva, objetos en js)\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState(\r\n        {\r\n            data: [],\r\n            loading: true,\r\n        }\r\n    );\r\n\r\n    // Se le envía como 2do. argumento un array de dependencias. Solo se ejecutará dependiendo de otro\r\n    // componente. Si indica [] quiere decir que se ejecutará una sola vez.\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            // .then( imgs => setImages(imgs));\r\n            .then( imgs => {\r\n                console.log(imgs);\r\n                setTimeout(() => {\r\n                    setState(\r\n                        {\r\n                            data: imgs,\r\n                            loading: false,\r\n                        }\r\n                    );\r\n                }, 0);\r\n            } ); // Como recibe un solo argumento se puede simplificar a esta expresión.\r\n    }, [ category ]) // Se indica aquí category por si cambia para que vuelva a ejecutar este código.\r\n\r\n\r\n\r\n    // setTimeout(() => {\r\n    //     setstate(\r\n    //         {\r\n    //             data: [1,2,3,4],\r\n    //             loading: false,\r\n    //         }\r\n    //     )\r\n    // }, 3000);\r\n\r\n    return state; // El state es el objeto que tiene a { data: [] y a loading: true }\r\n}","import React, { useState } from 'react';\r\n//import ReactDOM from 'react-dom';\r\nimport AddCategory from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    //const [categories, setCategories] = useState(['One Punch', 'Samurai X', 'Dragon Ball']);\r\n    const [categories, setCategories] = useState(['Steve Jobs']);\r\n\r\n    //console.log('GifExpertApps.categories', categories);\r\n    //console.log('GifExpertApps.categories', setCategories);\r\n\r\n    // const handleAdd = () => {\r\n    //     //setCategories( (category) => categories.push('iiifilomena') );\r\n    //     //categories.push('iiifilomena'); // No hacer esto, está mal.\r\n    //     //setCategories( [ categories[0], categories[1], categories[2], 'iiifilomena'] );\r\n    //     //setCategories( [...categories, 'iiifilomena'] );\r\n    //     // setCategories( cats => {\r\n    //     //     return [...categories, 'iiifilomena']; \r\n    //     // });\r\n    //     setCategories( cats => [...categories, 'iiifilomena'] );\r\n    //     console.log(categories);\r\n    // }\r\n\r\n\r\n\r\n\r\n    return (\r\n      <>\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setCategories = { setCategories } />\r\n        <hr />\r\n        {/* <button onClick={ handleAdd }>Agregar</button> */}\r\n        <ol>\r\n            { \r\n                categories.map( category => \r\n                    <GifGrid \r\n                        key={ category }\r\n                        category={ category } \r\n                    />\r\n                )\r\n            }\r\n        </ol>        \r\n      </>\r\n\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);"],"sourceRoot":""}